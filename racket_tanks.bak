#lang racket
(require lang/posn)
(require 2htdp/image)
(require 2htdp/universe)

; As with previous file, images for the background and tank will be needed here
; to practice with manipulating and animating the resulting images. The
; functions below are for this task.

; Create a relative path to current image folder
(define ImgDir (build-path (current-directory) "GameImgs"))

; Define game resources
(define background (bitmap/file (build-path ImgDir "Battlefield1.png")))
(define player1-sprite
  (scale 1.5 (rotate 90 (bitmap/file (build-path ImgDir "player1tank.png")))))
(define player2-sprite
  (scale 1.5 (rotate 90 (bitmap/file (build-path ImgDir "player2tank.png")))))

; Define the variables based on the size of the play screen
(define WIDTH (image-width background))
(define HEIGHT (image-height background))

;define game entities
(define terrain '())
(define projectiles '())
(define objs '())

;;Entity constructor
(define (make-entity sprite pos speed direction)
  (define (set-sprite new-sprite) (set! sprite new-sprite))
  (define (set-x xpos) (set! pos (cons xpos (cdr pos))))
  (define (set-y ypos) (set! pos (cons (car pos) ypos)))
  (define (set-pos new-pos) (set! pos new-pos))
  (define (set-spd spd) (set! speed spd))
  (define (set-dir angle) (set! direction angle))
  (define intact #t)
  (define (destroy) (set! intact #f))
  (define (initialize pos) (begin (set-pos pos) (set! intact #t)))

  (define (dispatch obj)
    (cond ((eq? obj 'sprite) sprite)
          ((eq? obj 'x) (car pos))
          ((eq? obj 'y) (cdr pos))
          ((eq? obj 'pos) pos)
          ((eq? obj 'set-x) set-x)
          ((eq? obj 'set-y) set-y)
          ((eq? obj 'set-pos) set-pos)
          ((eq? obj 'speed) speed)
          ((eq? obj 'set-spd) set-spd)
          ((eq? obj 'dir) direction)
          ((eq? obj 'set-dir) set-dir)
          ((eq? obj 'intact?) intact)
          ((eq? obj 'destroy) (set! intact #f))
          (else (begin (print "Unknown value") obj))))
  
  (set! objs (append objs (list dispatch)))
  
  dispatch)

;;Player Class
(define (make-player sprite pos)
  
  (define entity (make-entity sprite pos 0 0))
  
  (define (move)
    (cond ((and (> (entity 'x) 0) (< (entity 'x) WIDTH))
           ((entity 'set-x) (+ (entity 'x)
                               (inexact->exact (round (* (entity 'speed) (sin (entity 'dir)))))
                               ))))
    (cond ((and (> (entity 'y) 0) (< (entity 'y) HEIGHT))
           ((entity 'set-y) (+ (entity 'y)
                               (inexact->exact (round (* (entity 'speed) (cos (entity 'dir)))))
                               )))))

  (define (accelerate value)
    (cond ((and (< (entity 'speed) 5) (> (entity 'speed) -5))
           ((entity 'set-spd) (+ (entity 'speed) value)))))

  (define (turn-tank value)
    (if (> (+ (entity 'dir) value) 360)
        (- ((entity 'set-dir) (+ (entity 'dir) value)) 360)
        ((entity 'set-dir) (+ (entity 'dir) value))))

  (define (coast)
    (cond ((> (entity 'speed) 0) (accelerate -1))
          ((< (entity 'speed) 0) (accelerate 1))
          (else (accelerate 0))))

  (define (update dt)
    (move))

  (define (dispatch obj)
    (cond ((eq? obj 'spd-up) (accelerate 1))
          ((eq? obj 'slw-dwn) (accelerate -1))
          ((eq? obj 'turn-left) (turn-tank 12))
          ((eq? obj 'turn-right) (turn-tank -12))
          ((eq? obj 'stop-turn) (turn-tank 0))
          ((eq? obj 'coast) coast)
          (else (entity obj))))
  dispatch)

(define player1 (make-player player1-sprite (cons 20 20)))
(define player2 (make-player player1-sprite (cons 0 0)))

(define (handle-key-press wrld key)
  (cond
    [(key=? key "w")(player1 'spd-up)]
    [(key=? key "s") (player1 'slw-dwn)]
    [(key=? key "a") (player1 'turn-left)]
    [(key=? key "d") (player1 'turn-right)]
    [else wrld]))

(define (handle-key-release wrld key)
  (cond
    [(key=? key "w")(player1 'coast)]
    [(key=? key "s") (player1 'coast)]
    [(key=? key "a") (player1 'stop-turn)]
    [(key=? key "d") (player1 'stop-turn)]
    [else wrld]))

(define (destroyed? obj)
  (eq? (obj 'intact?) #f))

;; Rendering Initialization
(define objs-pos (map (位 (entity) (make-posn (entity 'x) (entity 'y))) (filter destroyed? objs)))
(define objs-sprites (map (位 (entity) (entity 'sprite)) (filter destroyed? objs)))
(define screen '())

(define (rendergame x)
  (set! objs-pos (map (位 (entity) (make-posn (entity 'x) (entity 'y))) (filter destroyed? objs)))
  (set! objs-sprites (map (位 (entity) (entity 'sprite)) (filter destroyed? objs)))
  (set! screen (place-images objs-sprites objs-pos background))
  screen)

(define (game-start)
  (begin (big-bang 0
                   (on-key handle-key-press)
                   (on-release handle-key-release)
                   (to-draw rendergame)))
  (error "error"))

;; Render Start Screen Interface
(define (change wrld key)
  (cond [(key=? key " ") ((game-start))]
        [else wrld]))

(define (rendertitle x)
  (bitmap/file (build-path ImgDir "Title_Splash.jpg")))

(big-bang 0
          (on-key change)
          (to-draw rendertitle))  